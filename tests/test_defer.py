def foo(): pass

def test_simple(dag):

    j = dag.defer(foo)()

    assert len(dag.nodes) == 1
    assert dag.input.data.values() == [(foo, (), {})]

    # The return value is the job instance, and this is in the DAG
    assert dag.nodes == [j]

def test_nodeid_autogenerated(dag):

    dag.defer(foo)()
    dag.defer(foo)()

    assert [x.id for x in dag.nodes] == ['foo_0', 'foo_1']

def test_nodeid_prefix(dag):

    dag.defer(foo, id_prefix="X")()
    dag.defer(foo, id_prefix="Y")()
    dag.defer(foo, id_prefix="X")()

    assert [x.id for x in dag.nodes] == ['X0', 'Y0', 'X1']
    assert sorted(dag.input.data.keys()) == ['X0', 'X1', 'Y0']

def test_args(dag):
    def foo(a, b, c): pass

    dag.defer(foo)(1, 2, c=3)

    assert dag.input.data == {"foo_0": (foo, (1, 2), {"c":3})}

def test_invalid_args(dag):
    dag.defer(foo)(1, 2, c=3)

    # FIXME: would like to raise an error if arguments don't match
    assert dag.input.data == {"foo_0": (foo, (1, 2), {"c":3})}

def test_vars(dag):
    j = dag.defer(foo, request_memory=123)()

    assert j.vars['request_memory'] == 123

def test_param_decorator_alt(dag):
    def bar(a): return "I am bar"

    d_bar = dag.defer(request_memory=123)(bar)
    j = d_bar(9)

    assert dag.input.data['bar_0'] == (bar, (9,), {})
